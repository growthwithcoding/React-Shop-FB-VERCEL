import express from 'express';
import cors from 'cors';
import fs from 'fs-extra';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const app = express();
const PORT = 3001;

// Middleware
app.use(cors());
app.use(express.json());

// Health check endpoint
app.get('/api/health', (req, res) => {
  res.json({ status: 'ok', message: 'Onboarding server is running' });
});

// Endpoint to create .env file
app.post('/api/create-env', async (req, res) => {
  try {
    const {
      apiKey,
      authDomain,
      projectId,
      storageBucket,
      messagingSenderId,
      appId
    } = req.body;

    // Validate required fields
    if (!apiKey || !authDomain || !projectId || !storageBucket || !appId) {
      return res.status(400).json({
        success: false,
        error: 'Missing required Firebase configuration fields'
      });
    }

    // Generate .env content
    const envContent = `# Firebase Configuration
# Auto-generated by onboarding setup
# Generated on: ${new Date().toISOString()}

VITE_FIREBASE_API_KEY=${apiKey}
VITE_FIREBASE_AUTH_DOMAIN=${authDomain}
VITE_FIREBASE_PROJECT_ID=${projectId}
VITE_FIREBASE_STORAGE_BUCKET=${storageBucket}
VITE_FIREBASE_APP_ID=${appId}
${messagingSenderId ? `VITE_FIREBASE_MESSAGING_SENDER_ID=${messagingSenderId}` : ''}
`;

    // Write .env file to project root
    const envPath = path.join(__dirname, '.env');
    await fs.writeFile(envPath, envContent, 'utf8');

    console.log('✅ .env file created successfully at:', envPath);
    
    res.json({
      success: true,
      message: '.env file created successfully',
      path: envPath,
      shouldReload: true // Signal frontend to reload
    });

  } catch (error) {
    console.error('Error creating .env file:', error);
    res.status(500).json({
      success: false,
      error: 'Failed to create .env file',
      details: error.message
    });
  }
});

// Endpoint to check if .env exists
app.get('/api/check-env', async (req, res) => {
  try {
    const envPath = path.join(__dirname, '.env');
    const exists = await fs.pathExists(envPath);
    
    res.json({
      exists,
      path: envPath
    });
  } catch (error) {
    console.error('Error checking .env file:', error);
    res.status(500).json({
      error: 'Failed to check .env file',
      details: error.message
    });
  }
});

// Endpoint to shut down the server
app.post('/api/shutdown', (req, res) => {
  console.log('\n✅ .env file created successfully!');
  console.log('👋 Shutting down onboarding server...');
  console.log('💡 The Vite dev server will continue running.\n');
  
  res.json({ success: true, message: 'Server shutting down' });
  
  // Give time for response to be sent, then shut down
  setTimeout(() => {
    // eslint-disable-next-line no-undef
    process.exit(0);
  }, 500);
});

// Start server
const server = app.listen(PORT, () => {
  console.log(`� Onboarding server running on http://localhost:${PORT}`);
  console.log(`📝 Ready to create .env file via API`);
});

// Export for potential programmatic shutdown
export default server;
